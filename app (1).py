# -*- coding: utf-8 -*-
"""App

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Tn_MturqKG96pUOG5UrG9r9cx5kWQKSe
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install pandas numpy scikit-learn matplotlib seaborn streamlit shap

# Commented out IPython magic to ensure Python compatibility.
# %pip install nltk spacy textblob

from textblob import download_corpora
download_corpora.download_all()

!python -m textblob.download_corpora

import pandas as pd

# Load dataset
df = pd.read_csv("survey.csv")
print(df.shape)
df.head()

# Select relevant columns
df = df[['Age', 'Gender', 'family_history', 'work_interfere', 'self_employed', 'mental_health_consequence', 'benefits', 'care_options', 'seek_help', 'anonymity', 'mental_vs_physical', 'obs_consequence', 'treatment']]

# Clean data
df = df[df['Age'].between(18, 65)]
df.dropna(inplace=True)

# Encode categorical features
df = pd.get_dummies(df, drop_first=True)

# Define X and y
X = df.drop('treatment_Yes', axis=1)
y = df['treatment_Yes']

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestClassifier()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

import matplotlib.pyplot as plt
import seaborn as sns

cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

print(classification_report(y_test, y_pred))

import shap

explainer = shap.TreeExplainer(model)
shap_values = explainer.shap_values(X_test)
shap.summary_plot(shap_values, X_test)

def recommend_tips(prediction):
    if prediction == 1:
        return "You may benefit from speaking to a mental health professional."
    else:
        return "Keep up with self-care. No immediate risk detected."

# Commented out IPython magic to ensure Python compatibility.
# %pip install streamlit

# save as app.py
import streamlit as st

st.title("ðŸ§  Mental Health Risk Predictor")

age = st.slider("Age", 18, 65)
family_history = st.selectbox("Family history of mental illness?", ["Yes", "No"])
seek_help = st.selectbox("Willing to seek help?", ["Yes", "No"])

# Dummy example for processing (replace with model logic)
if st.button("Predict"):
    # Example: use dummy logic or load model to predict
    prediction = 1 if family_history == "Yes" else 0
    st.success("Risk Level: High" if prediction == 1 else "Risk Level: Low")
    st.info(recommend_tips(prediction))

streamlit run app.py
